	
	#include "some resource" // for sure
	#include some other directive//with this
	#include some other directive

	{
		anonymous: child
		x: 5
		{
			nested: childthing
		}
	}
	[1,2,3]

	float: .1
  escapes: "Testing escapés\nLike a boss\tTabs too! \"Great\" isn't it"
  
	base64test: `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/`
	multilineBase64test:
	  <<<
	  abcdefghijklmnopqrstuvwxyz
	  ABCDEFGHIJKLMNOPQRSTUVWXYZ
	  0123456789+/
	  >>>

	base641:`YW55IGNhcm5hbCBwbGVhcw`
	base642:`YW55IGNhcm5hbCBwbGVhc3U`
	base643:`YW55IGNhcm5hbCBwbGVhc3Vy`
	base644:`YW55IGNhcm5hbCBwbGVhcw==`
	base645:`YW55IGNhcm5hbCBwbGVhc3U=`
	base646:`YW55IGNhcm5hbCBwbGVhc3Vy`
	
  spacesAndQuotésInClassNames: are_not_allowed { because: "we're cool" }
     
// This is a class called "clazz"
  some_class_or_other:
     clazz {
	    one: @reference# 12345
	    two: 2,
     }
     
// comments are useful
// specify rate in requests/second
  "rate": 1000

  // maybe you prefer js style comments
  /* or if you feel old fashioned */

// key names do not need to be placed in quotes
  key: "value"

// you don't need quotes for strings
  text: look ma, : \nno quotes!
  
// Unicode escapes are valid but only inside quoted strings
  unicodeEscapes: "Fingerspitzengéf\u00FChl is a German term.\nIt\u2019s pronounced as follows: [\u02C8f\u026A\u014B\u0250\u02CC\u0283p\u026Ats\u0259n\u0261\u0259\u02CCfy\u02D0l]"

// note that for quoteless strings everything up
// to the next line or a comma is part of the string!
  
  test:[@a, @b]
  
  test2:{ x: @getX, y: @getY, z: [@getZ] }
  
  numbersTest: [
  	1,
  	@function test
  	.1,
  	+.1,
  	-.1,
  	1.0, @test 3
  	+1,
  	-1,
  	+1.0,
  	-1.0,
  	+1.0e1,
  	-1.0e1,
  	+1.0e+1,
  	+1.0e-1,
  	.0e1,
  	0x1234,
  	%10101010
  ]

// commas are optional
  commas:
  {
    one: 1
    two: 2
  }

// trailing commas are allowed
  trailing:
  {
    one: 1,
    two: @"1234 asdasds",
  }

// It does typed arrays too
  typedarray: int [1, 2, 3, 4]

// multiline string
  test34:'''  abcde  '''
  haiku:
    '''
JSON I love you.
      But you "stranglé" my expression.\t
        This is so much better.
        
    '''

// Obviously you can always use standard JSON syntax as well:
  favNumbers: [ 1, 2, 3, 6, 42 ]
  